import { useEffect, useCallback, useState } from 'react'
import Head from 'next/head'
import { useWeb3React } from '@web3-react/core'
import { injected, changeToRopsten, getQuizzBalance, sendQuizzToContract } from '../web3'

import Button from '@mui/material/Button';



export const getStaticProps = async () => {

  //Get Quizz Questions
  const surveyRes = await fetch('https://ratherlabs-challenges.s3.sa-east-1.amazonaws.com/survey-sample.json')
  const survey = await surveyRes.json()

  return {
    props: {
      survey: survey
    }
  }

}


export default function Home({survey}) {
  
  //useWeb3React hooks to get web3 instance and user account
  const { activate, active, account, chainId, deactivate, error, library } = useWeb3React()
  
  //check if user is connected to the correct network
  const isRopsten = chainId === 3;
  
  //set user balance
  const [balance, setBalance] = useState('0')
  
  //Sate of contract response
  const [contractRes, setContractRes] = useState([])

  //Set UI until contract response
  const [isLoading, setIsLoading] = useState(false)
  
  //Change to Ropsten function
  const handleChangeChain = () => {
    
    changeToRopsten()
  }
  
  //Get user balance function
  const handleBalance = useCallback(() => {
    
    getQuizzBalance(account)
    .then((balance) => {
      setBalance(balance);
    })
    .catch( err => console.log("er",err))
    
  }, [account]);
  
  //Connect user to Metamask and get balance if is coneected to Ropsten
  const handleConnect = useCallback(() => {
    
    activate(injected)
    localStorage.setItem('previuoslyConnected', true)
    
    if(isRopsten) {
      
      handleBalance()
    }
    
  }, [activate, isRopsten, handleBalance])
  
  
  //Discount user from Metamask
  const handleDisconnect = () => {
    
    deactivate()
    localStorage.removeItem('previuoslyConnected')
  }
  
  
  //handle contract response
  const handleContractResponse = useCallback( async (a, b) => {
    setContractRes([a, b])
    setIsLoading(true)
  }, [])
  
  //Send Quizz function
  const HandlesendQuizz = async () => {
    
    sendQuizzToContract([0, 1, 1], account, handleContractResponse)
  }
    
  //Catch contract response and set UI
  useEffect(() => {

    if(contractRes[1] !== undefined) {
      console.log(contractRes[1].status)
      if(contractRes[1].status) {
        console.log("success")
        setIsLoading(false)
      }else {
        console.log("error")
        setIsLoading(false)
        //use this to show error, like toast
        console.log(contractRes[0].message)
        handleBalance()
      }
    }
  
  } , [contractRes, handleBalance])
    
    //Allow user to connect to Metamask if previuoslyConnected
  useEffect(() => {
    
    if (localStorage.getItem('previuoslyConnected') === 'true')
    handleConnect()
      
  }, [handleConnect])
  

  //Set UI based on user connection
  const initQuizzButton = isRopsten ? (
      <>
        <Button variant="contained" onClick={handleDisconnect}>Desconectar!</Button >
        <h2>
          Tu cuenta es: {account}
          <br />
          Tu balance es: {balance} QUIZZ
        </h2>
        <Button variant="contained" onClick={HandlesendQuizz}>Enviar QUIZZ</Button >
      </>
    ) : (
      <Button variant="contained" onClick={handleChangeChain}>Cambiar a Ropsten!</Button >
    )

  //Set error message
  if (error) {  
    return (
      <>
        <h1>Upps! Hubo un error durante la conexion:</h1>
        <p>{error.message}</p>
      </>
    )
  }

  //set isLoading UI

  if(isLoading) {
    return (
      <>
        <h1>Enviando QUIZZ...</h1>
      </>
    )
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome ~
          to Web3
        </h1>
        {
          active ? initQuizzButton : (
            //User connected but not on Ropsten
            <Button variant="contained" onClick={handleConnect}>Conectar!</Button >
          )
        }
        {

        }
      </main>
    </div>
  )
}
